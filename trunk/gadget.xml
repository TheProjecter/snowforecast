<?xml version="1.0" encoding="UTF-8" ?> 
<Module>
  <ModulePrefs title="__UP_myname__" 
	       height="200" 
	       author="Ignacio Rodriguez" 
	       author_email="irodriguez@pegaso.ls.fi.upm.es">
    <Require feature="dynamic-height" /> 
  </ModulePrefs>

 <UserPref name="myname" display_name="Title" required="true" default_value="Snowforecast Info"/>

  <UserPref name="mystation" display_name="Ski Resort" default_value="http://www.snow-forecast.com/resorts/La-Pinilla/6day/" datatype="enum" >
    <EnumValue value="http://www.snow-forecast.com/resorts/La-Pinilla/6day/" display_value="La Pinilla" />
    <EnumValue value="http://www.snow-forecast.com/resorts/PuertoDeNavacerrada/6day/" display_value="Puerto Navacerrada"/>
    <EnumValue value="http://www.snow-forecast.com/resorts/Valdezcaray/6day/" display_value="Valdezcaray"/>
    <EnumValue value="http://www.snow-forecast.com/resorts/Valdesqui/6day/" display_value="Valdesqui"/>
  </UserPref> 

  <UserPref name="myheight" display_name="Resort Info Altitude" default_value="bot" datatype="enum" >
    <EnumValue value="bot" display_value="Bot" />
    <EnumValue value="mid" display_value="Mid"/>
    <EnumValue value="top" display_value="Top"/>
  </UserPref> 

  <Content type="html">
  <![CDATA[ 
  <div id="content_div"></div>
  <script type="text/javascript"> 
  function displayMenu() { 
    // XML breakfast menu data
    var url = "http://doc.examples.googlepages.com/breakfast-data.xml"; 
    var prefs = new _IG_Prefs(__MODULE_ID__);
    // Calorie limit set by user
    var calorieLimit = prefs.getString("mycalories");
    // Indicates whether to show descriptions in the breakfast menu    
    var description = prefs.getBool("mychoice");
 
    _IG_FetchXmlContent(url, function (response) {
           if (response == null || typeof(response) != "object" || 
                      response.firstChild == null) {
              _gel("content_div").innerHTML = "<i>Invalid data.</i>";
              return;
           }

           // Start building HTML string that will be displayed in <div>.           
           // Set the style for the <div>.		
           var html = "<div style='padding: 5px;background-color: #ccf;font-family:Arial, Helvetica;" +                   
		          "text-align:left;font-size:90%'>";   
					    
           // Set style for title.
           html +="<div style='text-align:center; font-size: 120%; color: yellow; " +
		          "font-weight: 700;'>"; 

           // Display menu title. Use getElementsByTagName() to retrieve the <menu> element.
           // Since there is only one menu element in the file,
           // you can get to it by accessing the item at index "0". 
           // You can then use getAttribute to get the text associated with the
           // menu "title" attribute.
           var title = response.getElementsByTagName("menu").item(0).getAttribute("title");
 
           // Alternatively, you could retrieve the title by getting the menu element node
           // and calling the "attributes" function on it. This returns an array
           // of the element node's attributes. In this case, there is only one
           // attribute (title), so you could display the value for the attribute at
           // index 0. For example:
           // 
           // var title = response.getElementsByTagName("menu").item(0).attributes.item(0).nodeValue; 

           // Append the title to the HTML string.
           html += title + "</div><br>"; 

           // Get a list of the <food> element nodes in the file
           var itemList = response.getElementsByTagName("food");
 
           // Loop through all <food> nodes
           for (var i = 0; i < itemList.length ; i++) { 
             // For each <food> node, get child nodes.
             var nodeList = itemList.item(i).childNodes;

             // Loop through child nodes. Extract data from the text nodes that are
             // the children of the associated name, price, and calories element nodes.
             for (var j = 0; j < nodeList.length ; j++) {
                var node = nodeList.item(j);
                if (node.nodeName == "name") {
                   var name = node.firstChild.nodeValue;
                }
                if (node.nodeName == "price") {
                   var price = node.firstChild.nodeValue; 
                }
                if (node.nodeName == "calories") {
                   var calories = node.firstChild.nodeValue; 
                }
                // If the user chose to display descriptions and
                // the child node is "#cdata-section", grab the 
                // contents of the description CDATA for display.
                if (node.nodeName == "description" && description==true)
                {
                   if (node.firstChild.nodeName == "#cdata-section") 
                      var data = node.firstChild.nodeValue;
                }
             } 
             // Append extracted data to the HTML string.
             html += "<i><b>";
             html += name;
             html += "</b></i><br>";
             html += "&emsp;"; 
             html += price;
             html += " - ";
             // If "calories" is greater than the user-specified calorie limit,
             // display it in red.
             if(calories > calorieLimit) {
                html += "<font color=#ff0000>";
                html += calories + " calories";
                html += " </font>"; 
             }
             else
                html += calories + " calories";
             html += "<br>";
             // If user has chosen to display descriptions
             if (description==true) {
                html += "<i>" + data + "</i><br>";
             } 
         } 
         // Close up div
         html += "</div>";

        // Display HTML string in <div>
        _gel('content_div').innerHTML = html; 
    }); 
  }
  _IG_RegisterOnloadHandler(displayMenu);
  </script>
  ]]> 
  </Content>

</Module>
